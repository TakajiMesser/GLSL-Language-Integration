genType radians (genType degrees)
Converts degrees to radians, i.e., pi / 180 ⋅degrees.

genType degrees (genType radians)
Converts radians to degrees, i.e., 180 / pi radians.

genType sin (genType angle)
The standard trigonometric sine function.

genType cos (genType angle) 
The standard trigonometric cosine function.

genType tan (genType angle)
The standard trigonometric tangent.

genType asin (genType x) 
Arc sine. Returns an angle whose sine is x.
The range of values returned by this function is [−pi / 2, pi / 2].
Results are undefined if ∣x∣ > 1.

genType acos (genType x)
Arc cosine. Returns an angle whose cosine is x. The
range of values returned by this function is [0, p].
Results are undefined if ∣x∣ > 1.

genType atan (genType y, genType x)
Arc tangent. Returns an angle whose tangent is y / x. The
signs of x and y are used to determine what quadrant the
angle is in. The range of values returned by this
function is [−pi, pi]. Results are undefined if x and
y are both 0.

genType atan (genType y_over_x) 
Arc tangent. Returns an angle whose tangent is
y_over_x. The range of values returned by this function
is [−pi / 2, pi / 2].

genType sinh (genType x)
Returns the hyperbolic sine function
(e ^ x - e ^ (-x)) / 2

genType cosh (genType x)
Returns the hyperbolic cosine function
(e ^ x + e ^ (-x)) / 2

genType tanh (genType x)
Returns the hyperbolic tangent function
sinh(x) / cosh(x)

genType asinh (genType x)
Arc hyperbolic sine; returns the inverse of sinh.

genType acosh (genType x)
Arc hyperbolic cosine; returns the non-negative inverse
of cosh. Results are undefined if x < 1.

genType atanh (genType x)
Arc hyperbolic tangent; returns the inverse of tanh.
Results are undefined if ∣x∣ >= 1.

genType pow (genType x, genType y)
Returns x raised to the y power, i.e., x ^ y
Results are undefined if x < 0.
Results are undefined if x = 0 and y <= 0.

genType exp (genType x)
Returns the natural exponentiation of x, i.e., e ^ x

genType log (genType x)
Returns the natural logarithm of x, i.e., returns the value
y which satisfies the equation x = e ^ y
Results are undefined if x <= 0.

genType exp2 (genType x)
Returns 2 raised to the x power, i.e., 2 ^ x

genType log2 (genType x)
Returns the base 2 logarithm of x, i.e., returns the value
y which satisfies the equation x = 2 ^ y
Results are undefined if x <= 0.

genType sqrt (genType x)
Returns √x.
Results are undefined if x < 0.

genDType sqrt (genDType x)
Returns √x.
Results are undefined if x < 0.

genType inversesqrt (genType x)
Returns 1 / √x.
Results are undefined if x <= 0.

genDType inversesqrt (genDType x)Returns 1 / √x.
Results are undefined if x <= 0.

genType abs (genType x)
Returns x if x >= 0; otherwise it returns –x.

genIType abs (genIType x)
Returns x if x >= 0; otherwise it returns –x.

genDType abs (genDType x)
Returns x if x >= 0; otherwise it returns –x.

genType sign (genType x)
Returns 1.0 if x > 0, 0.0 if x = 0, or –1.0 if x < 0.

genIType sign (genIType x)
Returns 1.0 if x > 0, 0.0 if x = 0, or –1.0 if x < 0.

genDType sign (genDType x)
Returns 1.0 if x > 0, 0.0 if x = 0, or –1.0 if x < 0.

genType floor (genType x)Returns a value equal to the nearest integer that is less
than or equal to x.genDType floor (genDType x)Returns a value equal to the nearest integer that is less
than or equal to x.

genType trunc (genType x)Returns a value equal to the nearest integer to x whose
absolute value is not larger than the absolute value of x.

genDType trunc (genDType x)Returns a value equal to the nearest integer to x whose
absolute value is not larger than the absolute value of x.

genType round (genType x)
Returns a value equal to the nearest integer to x. The
fraction 0.5 will round in a direction chosen by the
implementation, presumably the direction that is fastest.
This includes the possibility that round(x) returns the
same value as roundEven(x) for all values of x.

genDType round (genDType x)
Returns a value equal to the nearest integer to x. The
fraction 0.5 will round in a direction chosen by the
implementation, presumably the direction that is fastest.
This includes the possibility that round(x) returns the
same value as roundEven(x) for all values of x.

genType roundEven (genType x)
Returns a value equal to the nearest integer to x. A
fractional part of 0.5 will round toward the nearest even
integer. (Both 3.5 and 4.5 for x will return 4.0.)

genDType roundEven (genDType x)
Returns a value equal to the nearest integer to x. A
fractional part of 0.5 will round toward the nearest even
integer. (Both 3.5 and 4.5 for x will return 4.0.)

genType ceil (genType x)
Returns a value equal to the nearest integer that is
greater than or equal to x.

genDType ceil (genDType x)
Returns a value equal to the nearest integer that is
greater than or equal to x.

genType fract (genType x)
Returns x – floor (x).

genDType fract (genDType x)
Returns x – floor (x).

genType mod (genType x, float y)Modulus. Returns x – y * floor (x/y).

genType mod (genType x, genType y)Modulus. Returns x – y * floor (x/y).

genDType mod (genDType x, double y)Modulus. Returns x – y * floor (x/y).

genDType mod (genDType x, genDType y)Modulus. Returns x – y * floor (x/y).

genType modf (genType x, out genType i)
Returns the fractional part of x and sets i to the integer
part (as a whole number floating-point value). Both the
return value and the output parameter will have the same
sign as x.

genDType modf (genDType x, out genDType i)
Returns the fractional part of x and sets i to the integer
part (as a whole number floating-point value). Both the
return value and the output parameter will have the same
sign as x.

genType min (genType x, genType y)
Returns y if y < x; otherwise it returns x.genType min (genType x, float y)
Returns y if y < x; otherwise it returns x.genDType min (genDType x, genDType y)
Returns y if y < x; otherwise it returns x.genDType min (genDType x, double y)
Returns y if y < x; otherwise it returns x.genIType min (genIType x, genIType y)
Returns y if y < x; otherwise it returns x.genIType min (genIType x, int y)
Returns y if y < x; otherwise it returns x.genUType min (genUType x, genUType y)
Returns y if y < x; otherwise it returns x.genUType min (genUType x, uint y)
Returns y if y < x; otherwise it returns x.

genType max (genType x, genType y)
Returns y if x < y; otherwise it returns x.genType max (genType x, float y)
Returns y if x < y; otherwise it returns x.genDType max (genDType x, genDType y)
Returns y if x < y; otherwise it returns x.genDType max (genDType x, double y)
Returns y if x < y; otherwise it returns x.genIType max (genIType x, genIType y)
Returns y if x < y; otherwise it returns x.genIType max (genIType x, int y)
Returns y if x < y; otherwise it returns x.genUType max (genUType x, genUType y)
Returns y if x < y; otherwise it returns x.genUType max (genUType x, uint y)
Returns y if x < y; otherwise it returns x.

genType clamp (genType x, genType minVal, genType maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genType clamp (genType x, float minVal, float maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genDType clamp (genDType x, genDType minVal, genDType maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genDType clamp (genDType x, double minVal, double maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genIType clamp (genIType x, genIType minVal, genIType maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genIType clamp (genIType x, int minVal, int maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genUType clamp (genUType x, genUType minVal, genUType maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

genUType clamp (genUType x, uint minVal, uint maxVal)
Returns min (max (x, minVal), maxVal).
Results are undefined if minVal > maxVal.

mix

step

smoothstep

isnan

isinf

floatBitsToInt

floatBitsToUint

intBitsToFloat

uintBitsToFloat

fma

frexp

ldexp

packUnorm2x16

packSnorm2x16

packUnorm4x8

packSnorm4x8

unpackUnorm2x16

unpackSnorm2x16

unpackUnorm4x8

unpackSnorm4x8

packDouble2x32

unpackDouble2x32

packHalf2x16

unpackHalf2x16

length

distance

dot

cross

normalize

ftransform

faceforward

reflect

refract

matrixCompMult

outerProduct

transpose

determinant

inverse

lessThan

lessThanEqual

greaterThan

greaterThanEqual

equal

notEqual

any

all

not

uaddCarry

usubBorrow

umulExtended

imulExtended

bitfieldExtract

bitfieldInsert

bitfieldReverse

bitCount

findLSB

findMSB

textureSize

textureQueryLod

textureQueryLevels

textureSamples

texture

textureProj

textureLod

textureOffset

texelFetch

texelFetchOffset

textureProjOffset

textureLodOffset

textureProjLod

textureProjLodOffset

textureGrad

textureGradOffset

textureProjGrad

textureProjGradOffset

textureGather

textureGatherOffset

textureGatherOffsets

texture1D

texture1DProj

texture1DLod

texture1DProjLod

texture2D

texture2DProj

texture2DLod

texture2DProjLod

texture3D

texture3DProj

texture3DLod

texture3DProjLod

textureCube

textureCubeLod

shadow1D

shadow2D

shadow1DProj

shadow2DProj

shadow1DLod

shadow2DLod

shadow1DProjLod

shadow2DProjLod

atomicCounterIncrement

atomicCounterDecrement

atomicCounter

atomicAdd

atomicMin

atomicMax

atomicAnd

atomicOr

atomicXor

atomicExchange

atomicCompSwap

imageSize

imageSamples

imageLoad

imageStore

imageAtomicAdd

imageAtomicMin

imageAtomicMax

imageAtomicAnd

imageAtomicOr

imageAtomicXor

imageAtomicExchange

imageAtomicCompSwap

dFdx

dFdy

dFdxFine

dFdyFine

dFdxCoarse

dFdyCoarse

fwidth

fwidthFine

fwidthCoarse

interpolateAtCentroid

interpolateAtSample

interpolateAtOffset

noise1

noise2

noise3

noise4

EmitStreamVertex

EndStreamPrimitive

EmitVertex

EndPrimitive

barrier

memoryBarrier

memoryBarrierAtomicCounter

memoryBarrierBuffer

memoryBarrierShared

memoryBarrierImage

groupMemoryBarrier

subpassLoad
